# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  content: String!
  id: ID!
  ticket: Ticket!
  user: User!
}

input CommentInput {
  content: String!
  id: ID!
  ticket: TicketInput!
  user: UserInput!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  addUserToProject(project: ProjectInput!, role: UserRole!, user: UserInput!): UserToProject!
  createComment(content: String!, ticket: TicketInput!, user: UserInput!): Comment!
  createNotification(description: String!, title: String!, user: UserInput!): Notification!
  createProject(description: String!, end_date: DateTime!, picture: String!, start_date: DateTime!, title: String!): Project!
  createSprint(end_date: DateTime!, start_date: DateTime!, tickets: [TicketInput!]!): Sprint!
  createTicket(description: String!, estimated_timeframe: DateTime!, project: ProjectInput!, status: Float!, title: String!): Ticket!
  deleteAllCommentsByUser(user: UserInput!): [Comment!]!
  deleteAllProjects: [Project!]!
  deleteAllSprints: Sprint!
  deleteAllTicketsByProject(project: [ProjectInput!]!): Boolean!
  deleteAllTicketsBySprint(sprint: [SprintInput!]!): Boolean!
  deleteComment(id: Float!): Comment!
  deleteNotification(id: Float!, user: UserInput!): Notification!
  deleteProject(id: Float!): Project!
  deleteRoleOfUserByProject(project: ProjectInput!, user: UserInput!): UserToProject!
  deleteSprint(id: Float!): Sprint!
  deleteTicket(id: Float!): Ticket!
  deleteUser(id: ID!): User!
  login(email: String!, password: String!): UserResponse!
  register(email: String!, firstname: String!, lastname: String!, password: String!): UserResponse!
  removeUserFromProject(project: ProjectInput!, user: UserInput!): UserToProject!
  updateComment(content: String!, id: Float!, user: UserInput!): Comment!
  updateRoleOfUserByProject(project: ProjectInput!, role: UserRole!, user: UserInput!): UserToProject!
  updateSprint(end_date: DateTime!, id: Float!, start_date: DateTime!, tickets: [TicketInput!]!): Sprint!
  updateTicket(description: String!, estimated_timeframe: DateTime!, id: Float!, project: ProjectInput!, sprint: SprintInput!, status: Float!, title: String!): Ticket!
  updateUser(email: String!, firstname: String!, lastname: String!, password: String!): User!
  updateproject(description: String!, end_date: DateTime!, id: ID!, picture: String!, start_date: DateTime!, tickets: [TicketInput!]!, title: String!): Project!
}

type Notification {
  date: DateTime!
  description: String!
  id: ID!
  title: String!
  user: User!
}

input NotificationInput {
  date: DateTime!
  description: String!
  id: ID!
  title: String!
  user: UserInput!
}

type Project {
  description: String!
  end_date: DateTime!
  id: ID!
  picture: String!
  start_date: DateTime!
  tickets: [Ticket!]!
  title: String!
}

input ProjectInput {
  description: String!
  end_date: DateTime!
  id: ID!
  picture: String!
  start_date: DateTime!
  tickets: [TicketInput!]!
  title: String!
}

type Query {
  getAllCommentsByTicket(ticket: TicketInput!): [Comment!]!
  getAllCommentsByUser(email: String!): [Comment!]!
  getAllNotificationsByUser(user: UserInput!): [Notification!]!
  getAllProjects: [Project!]!
  getAllProjectsByUser(user: UserInput!): [Project!]!
  getAllProjectsByUserAndRole(role: UserRole!, user: UserInput!): [Project!]!
  getAllTickets: [Ticket!]!
  getAllTicketsByProject(project: ProjectInput!): [Ticket!]!
  getAllTicketsBySprint(sprint: SprintInput!): [Ticket!]!
  getAllTicketsByStatus(status: Float!): [Ticket!]!
  getAllUsers: [User!]!
  getAllUsersByProject(projectId: String!): [User!]!
  getAllUsersByProjectAndRole(project: ProjectInput!, role: UserRole!): [User!]!
  getAllUsersByRole(role: UserRole!): [User!]!
  getOneComment(id: Float!): Comment!
  getOneProject(id: ID!): Project!
  getOneTicket(id: Float!): Ticket!
  getOneUser(email: String!): User!
}

type Sprint {
  end_date: DateTime!
  id: ID!
  start_date: DateTime!
  tickets: [Ticket!]!
}

input SprintInput {
  end_date: DateTime!
  id: ID!
  start_date: DateTime!
  tickets: [TicketInput!]!
}

type Ticket {
  comments: [Comment!]!
  description: String!
  estimated_timeframe: DateTime!
  id: ID!
  project: Project!
  sprint: Sprint!
  status: Float!
  time_spent: Float!
  title: String!
}

input TicketInput {
  comments: [CommentInput!]!
  description: String!
  estimated_timeframe: DateTime!
  id: ID!
  project: ProjectInput!
  sprint: SprintInput!
  status: Float!
  time_spent: Float!
  title: String!
}

type User {
  comments: [Comment!]!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  notifications: [Notification!]!
}

input UserInput {
  comments: [CommentInput!]!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  notifications: [NotificationInput!]!
}

type UserResponse {
  message: String!
  statusCode: Float!
  token: String
}

"""The basic roles"""
enum UserRole {
  ADMIN
  DEVELOPER
  PRODUCT_MANAGER
}

type UserToProject {
  id: ID!
  project: Project!
  role: UserRole!
  user: User!
}
